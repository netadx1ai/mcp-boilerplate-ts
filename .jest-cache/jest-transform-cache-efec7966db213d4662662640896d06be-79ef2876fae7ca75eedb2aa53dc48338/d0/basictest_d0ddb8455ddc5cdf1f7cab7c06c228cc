ed7d3112d79e967436ade86d462e4650
"use strict";
/**
 * @fileoverview Basic Test Suite
 *
 * Basic tests to verify Jest ES modules configuration and core functionality
 * of the MCP TypeScript boilerplate ecosystem.
 *
 * @author MCP Boilerplate Team
 * @version 1.0.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// =============================================================================
// Basic Functionality Tests
// =============================================================================
(0, globals_1.describe)('Basic TypeScript and Jest Configuration', () => {
    (0, globals_1.test)('should support ES modules', () => {
        // Test that ES module imports work
        (0, globals_1.expect)(typeof globals_1.describe).toBe('function');
        (0, globals_1.expect)(typeof globals_1.test).toBe('function');
        (0, globals_1.expect)(typeof globals_1.expect).toBe('function');
    });
    (0, globals_1.test)('should support async/await', async () => {
        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        const start = Date.now();
        await delay(10);
        const elapsed = Date.now() - start;
        (0, globals_1.expect)(elapsed).toBeGreaterThanOrEqual(8); // Allow for timing variance
    });
    (0, globals_1.test)('should support TypeScript types', () => {
        const testObject = {
            id: 1,
            name: 'test',
            active: true,
        };
        (0, globals_1.expect)(testObject.id).toBe(1);
        (0, globals_1.expect)(testObject.name).toBe('test');
        (0, globals_1.expect)(testObject.active).toBe(true);
    });
    (0, globals_1.test)('should handle JSON operations', () => {
        const testData = {
            server: 'mcp-boilerplate-ts',
            version: '1.0.0',
            tools: ['echo', 'calculator', 'health'],
        };
        const jsonString = JSON.stringify(testData);
        const parsed = JSON.parse(jsonString);
        (0, globals_1.expect)(parsed).toEqual(testData);
        (0, globals_1.expect)(parsed.tools).toHaveLength(3);
    });
});
// =============================================================================
// Utility Function Tests
// =============================================================================
(0, globals_1.describe)('Utility Functions', () => {
    (0, globals_1.test)('should generate unique IDs', () => {
        const generateId = () => `id_${Math.random().toString(36).substr(2, 9)}`;
        const id1 = generateId();
        const id2 = generateId();
        (0, globals_1.expect)(id1).not.toBe(id2);
        (0, globals_1.expect)(id1).toMatch(/^id_[a-z0-9]{9}$/);
        (0, globals_1.expect)(id2).toMatch(/^id_[a-z0-9]{9}$/);
    });
    (0, globals_1.test)('should handle error objects', () => {
        const createError = (message) => new Error(message);
        const error = createError('Test error');
        (0, globals_1.expect)(error).toBeInstanceOf(Error);
        (0, globals_1.expect)(error.message).toBe('Test error');
        (0, globals_1.expect)(error.stack).toBeDefined();
    });
    (0, globals_1.test)('should validate timestamps', () => {
        const now = new Date().toISOString();
        (0, globals_1.expect)(now).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/);
        (0, globals_1.expect)(new Date(now)).toBeInstanceOf(Date);
    });
});
// =============================================================================
// Mock MCP Server Tests
// =============================================================================
(0, globals_1.describe)('Mock MCP Server Structure', () => {
    const mockTools = [
        {
            name: 'echo',
            description: 'Echo back a message',
            schema: { message: 'string' },
            handler: async ({ message }) => ({ result: message }),
        },
        {
            name: 'add',
            description: 'Add two numbers',
            schema: { a: 'number', b: 'number' },
            handler: async ({ a, b }) => ({ result: a + b }),
        },
    ];
    (0, globals_1.test)('should register and execute tools', async () => {
        const echoTool = mockTools.find(t => t.name === 'echo');
        const addTool = mockTools.find(t => t.name === 'add');
        (0, globals_1.expect)(echoTool).toBeDefined();
        (0, globals_1.expect)(addTool).toBeDefined();
        if (echoTool) {
            const echoResult = await echoTool.handler({ message: 'Hello' });
            (0, globals_1.expect)(echoResult.result).toBe('Hello');
        }
        if (addTool) {
            const addResult = await addTool.handler({ a: 5, b: 3 });
            (0, globals_1.expect)(addResult.result).toBe(8);
        }
    });
    (0, globals_1.test)('should handle tool errors gracefully', async () => {
        const errorTool = {
            name: 'error_test',
            description: 'Tool that throws an error',
            schema: {},
            handler: async () => {
                throw new Error('Intentional test error');
            },
        };
        let caughtError = null;
        try {
            await errorTool.handler({});
        }
        catch (error) {
            caughtError = error;
        }
        (0, globals_1.expect)(caughtError).toBeInstanceOf(Error);
        (0, globals_1.expect)(caughtError?.message).toBe('Intentional test error');
    });
});
// =============================================================================
// Performance Tests
// =============================================================================
(0, globals_1.describe)('Performance Tests', () => {
    (0, globals_1.test)('should execute quickly', async () => {
        const start = Date.now();
        // Simulate some work
        const data = Array.from({ length: 1000 }, (_, i) => ({ id: i, value: Math.random() }));
        const filtered = data.filter(item => item.value > 0.5);
        const mapped = filtered.map(item => ({ ...item, doubled: item.value * 2 }));
        const elapsed = Date.now() - start;
        (0, globals_1.expect)(elapsed).toBeLessThan(100); // Should be very fast
        (0, globals_1.expect)(mapped.length).toBeGreaterThan(0);
        (0, globals_1.expect)(mapped.length).toBeLessThanOrEqual(1000);
    });
    (0, globals_1.test)('should handle concurrent operations', async () => {
        const concurrentTasks = Array.from({ length: 10 }, async (_, i) => {
            await new Promise(resolve => setTimeout(resolve, Math.random() * 10));
            return `task-${i}`;
        });
        const start = Date.now();
        const results = await Promise.all(concurrentTasks);
        const elapsed = Date.now() - start;
        (0, globals_1.expect)(results).toHaveLength(10);
        (0, globals_1.expect)(elapsed).toBeLessThan(100); // Should complete quickly
        (0, globals_1.expect)(results).toEqual(globals_1.expect.arrayContaining([
            globals_1.expect.stringMatching(/^task-\d+$/)
        ]));
    });
});
// =============================================================================
// Integration Readiness Tests
// =============================================================================
(0, globals_1.describe)('Integration Readiness', () => {
    (0, globals_1.test)('should have required Node.js version', () => {
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
        (0, globals_1.expect)(majorVersion).toBeGreaterThanOrEqual(18);
    });
    (0, globals_1.test)('should support modern JavaScript features', () => {
        // Test optional chaining
        const obj = { a: { b: { c: 'value' } } };
        (0, globals_1.expect)(obj.a?.b?.c).toBe('value');
        (0, globals_1.expect)(obj.a?.b?.d).toBeUndefined();
        // Test nullish coalescing
        const nullValue = null;
        const undefinedValue = undefined;
        const zeroValue = 0;
        const emptyString = '';
        (0, globals_1.expect)(nullValue ?? 'default').toBe('default');
        (0, globals_1.expect)(undefinedValue ?? 'default').toBe('default');
        (0, globals_1.expect)(zeroValue ?? 'default').toBe(0);
        (0, globals_1.expect)(emptyString ?? 'default').toBe('');
    });
    (0, globals_1.test)('should support destructuring and spread', () => {
        const source = { a: 1, b: 2, c: 3 };
        const { a, ...rest } = source;
        (0, globals_1.expect)(a).toBe(1);
        (0, globals_1.expect)(rest).toEqual({ b: 2, c: 3 });
        const extended = { ...source, d: 4 };
        (0, globals_1.expect)(extended).toEqual({ a: 1, b: 2, c: 3, d: 4 });
    });
});
// =============================================================================
// Mock Server Response Tests
// =============================================================================
(0, globals_1.describe)('Mock Server Responses', () => {
    (0, globals_1.test)('should format MCP responses correctly', () => {
        const mockResponse = {
            content: [
                {
                    type: 'text',
                    text: 'Hello from MCP server',
                },
            ],
        };
        (0, globals_1.expect)(mockResponse.content).toHaveLength(1);
        (0, globals_1.expect)(mockResponse.content[0].type).toBe('text');
        (0, globals_1.expect)(mockResponse.content[0].text).toBe('Hello from MCP server');
    });
    (0, globals_1.test)('should handle error responses', () => {
        const mockErrorResponse = {
            content: [
                {
                    type: 'text',
                    text: 'An error occurred',
                },
            ],
            isError: true,
        };
        (0, globals_1.expect)(mockErrorResponse.isError).toBe(true);
        (0, globals_1.expect)(mockErrorResponse.content[0].text).toBe('An error occurred');
    });
    (0, globals_1.test)('should handle complex data responses', () => {
        const complexData = {
            users: [
                { id: 1, name: 'Alice', roles: ['admin'] },
                { id: 2, name: 'Bob', roles: ['user'] },
            ],
            pagination: {
                page: 1,
                total: 2,
                hasMore: false,
            },
        };
        const mockResponse = {
            content: [
                {
                    type: 'text',
                    text: JSON.stringify(complexData, null, 2),
                },
            ],
        };
        const parsedContent = JSON.parse(mockResponse.content[0].text);
        (0, globals_1.expect)(parsedContent.users).toHaveLength(2);
        (0, globals_1.expect)(parsedContent.users[0].name).toBe('Alice');
        (0, globals_1.expect)(parsedContent.pagination.total).toBe(2);
    });
});
// =============================================================================
// Environment and Configuration Tests
// =============================================================================
(0, globals_1.describe)('Environment Configuration', () => {
    const originalEnv = process.env;
    (0, globals_1.afterAll)(() => {
        process.env = originalEnv;
    });
    (0, globals_1.test)('should handle environment variables', () => {
        process.env.TEST_VAR = 'test_value';
        (0, globals_1.expect)(process.env.TEST_VAR).toBe('test_value');
        (0, globals_1.expect)(process.env.NONEXISTENT_VAR).toBeUndefined();
    });
    (0, globals_1.test)('should detect environment type', () => {
        // Test NODE_ENV detection
        process.env.NODE_ENV = 'test';
        (0, globals_1.expect)(process.env.NODE_ENV).toBe('test');
        const isDevelopment = process.env.NODE_ENV === 'development';
        const isProduction = process.env.NODE_ENV === 'production';
        const isTest = process.env.NODE_ENV === 'test';
        (0, globals_1.expect)(isDevelopment).toBe(false);
        (0, globals_1.expect)(isProduction).toBe(false);
        (0, globals_1.expect)(isTest).toBe(true);
    });
});
// =============================================================================
// Resource Management Tests
// =============================================================================
(0, globals_1.describe)('Resource Management', () => {
    (0, globals_1.test)('should manage memory efficiently', () => {
        const initialMemory = process.memoryUsage();
        // Create some data
        const largeArray = Array.from({ length: 10000 }, (_, i) => ({
            id: i,
            data: `item-${i}`,
            timestamp: new Date().toISOString(),
        }));
        (0, globals_1.expect)(largeArray).toHaveLength(10000);
        // Memory should not be excessive
        const currentMemory = process.memoryUsage();
        const heapDiff = currentMemory.heapUsed - initialMemory.heapUsed;
        // Should use less than 50MB for this test data
        (0, globals_1.expect)(heapDiff).toBeLessThan(50 * 1024 * 1024);
    });
    (0, globals_1.test)('should handle cleanup properly', () => {
        let cleanupCalled = false;
        const mockCleanup = () => {
            cleanupCalled = true;
        };
        // Simulate resource allocation and cleanup
        const resource = { cleanup: mockCleanup };
        resource.cleanup();
        (0, globals_1.expect)(cleanupCalled).toBe(true);
    });
});
// =============================================================================
// System Information Tests
// =============================================================================
(0, globals_1.describe)('System Information', () => {
    (0, globals_1.test)('should provide system details', () => {
        (0, globals_1.expect)(process.platform).toBeDefined();
        (0, globals_1.expect)(process.arch).toBeDefined();
        (0, globals_1.expect)(process.version).toMatch(/^v\d+\.\d+\.\d+/);
        (0, globals_1.expect)(process.uptime()).toBeGreaterThan(0);
    });
    (0, globals_1.test)('should track timing accurately', () => {
        const start = process.hrtime.bigint();
        // Small delay to ensure measurable time difference
        for (let i = 0; i < 1000; i++) {
            Math.random();
        }
        const end = process.hrtime.bigint();
        const duration = Number(end - start) / 1000000; // Convert to milliseconds
        (0, globals_1.expect)(duration).toBeGreaterThan(0);
        (0, globals_1.expect)(duration).toBeLessThan(100); // Should be very fast
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,