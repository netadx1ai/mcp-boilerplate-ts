{"file":"/Volumes/T72/Work2025AI/MCP-Genertic/mcp-boilerplate-ts/tests/basic.test.ts","mappings":"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","names":[],"sources":["/Volumes/T72/Work2025AI/MCP-Genertic/mcp-boilerplate-ts/tests/basic.test.ts"],"sourcesContent":["/**\n * @fileoverview Basic Test Suite\n * \n * Basic tests to verify Jest ES modules configuration and core functionality\n * of the MCP TypeScript boilerplate ecosystem.\n * \n * @author MCP Boilerplate Team\n * @version 1.0.0\n */\n\nimport { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\n\n// =============================================================================\n// Basic Functionality Tests\n// =============================================================================\n\ndescribe('Basic TypeScript and Jest Configuration', () => {\n  test('should support ES modules', () => {\n    // Test that ES module imports work\n    expect(typeof describe).toBe('function');\n    expect(typeof test).toBe('function');\n    expect(typeof expect).toBe('function');\n  });\n\n  test('should support async/await', async () => {\n    const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n    \n    const start = Date.now();\n    await delay(10);\n    const elapsed = Date.now() - start;\n    \n    expect(elapsed).toBeGreaterThanOrEqual(8); // Allow for timing variance\n  });\n\n  test('should support TypeScript types', () => {\n    interface TestInterface {\n      id: number;\n      name: string;\n      active: boolean;\n    }\n\n    const testObject: TestInterface = {\n      id: 1,\n      name: 'test',\n      active: true,\n    };\n\n    expect(testObject.id).toBe(1);\n    expect(testObject.name).toBe('test');\n    expect(testObject.active).toBe(true);\n  });\n\n  test('should handle JSON operations', () => {\n    const testData = {\n      server: 'mcp-boilerplate-ts',\n      version: '1.0.0',\n      tools: ['echo', 'calculator', 'health'],\n    };\n\n    const jsonString = JSON.stringify(testData);\n    const parsed = JSON.parse(jsonString);\n\n    expect(parsed).toEqual(testData);\n    expect(parsed.tools).toHaveLength(3);\n  });\n});\n\n// =============================================================================\n// Utility Function Tests\n// =============================================================================\n\ndescribe('Utility Functions', () => {\n  test('should generate unique IDs', () => {\n    const generateId = () => `id_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const id1 = generateId();\n    const id2 = generateId();\n    \n    expect(id1).not.toBe(id2);\n    expect(id1).toMatch(/^id_[a-z0-9]{9}$/);\n    expect(id2).toMatch(/^id_[a-z0-9]{9}$/);\n  });\n\n  test('should handle error objects', () => {\n    const createError = (message: string) => new Error(message);\n    \n    const error = createError('Test error');\n    \n    expect(error).toBeInstanceOf(Error);\n    expect(error.message).toBe('Test error');\n    expect(error.stack).toBeDefined();\n  });\n\n  test('should validate timestamps', () => {\n    const now = new Date().toISOString();\n    \n    expect(now).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n    expect(new Date(now)).toBeInstanceOf(Date);\n  });\n});\n\n// =============================================================================\n// Mock MCP Server Tests\n// =============================================================================\n\ndescribe('Mock MCP Server Structure', () => {\n  interface MockTool {\n    name: string;\n    description: string;\n    schema: Record<string, any>;\n    handler: (args: any) => Promise<any>;\n  }\n\n  const mockTools: MockTool[] = [\n    {\n      name: 'echo',\n      description: 'Echo back a message',\n      schema: { message: 'string' },\n      handler: async ({ message }) => ({ result: message }),\n    },\n    {\n      name: 'add',\n      description: 'Add two numbers',\n      schema: { a: 'number', b: 'number' },\n      handler: async ({ a, b }) => ({ result: a + b }),\n    },\n  ];\n\n  test('should register and execute tools', async () => {\n    const echoTool = mockTools.find(t => t.name === 'echo');\n    const addTool = mockTools.find(t => t.name === 'add');\n\n    expect(echoTool).toBeDefined();\n    expect(addTool).toBeDefined();\n\n    if (echoTool) {\n      const echoResult = await echoTool.handler({ message: 'Hello' });\n      expect(echoResult.result).toBe('Hello');\n    }\n\n    if (addTool) {\n      const addResult = await addTool.handler({ a: 5, b: 3 });\n      expect(addResult.result).toBe(8);\n    }\n  });\n\n  test('should handle tool errors gracefully', async () => {\n    const errorTool: MockTool = {\n      name: 'error_test',\n      description: 'Tool that throws an error',\n      schema: {},\n      handler: async () => {\n        throw new Error('Intentional test error');\n      },\n    };\n\n    let caughtError: Error | null = null;\n    \n    try {\n      await errorTool.handler({});\n    } catch (error) {\n      caughtError = error as Error;\n    }\n\n    expect(caughtError).toBeInstanceOf(Error);\n    expect(caughtError?.message).toBe('Intentional test error');\n  });\n});\n\n// =============================================================================\n// Performance Tests\n// =============================================================================\n\ndescribe('Performance Tests', () => {\n  test('should execute quickly', async () => {\n    const start = Date.now();\n    \n    // Simulate some work\n    const data = Array.from({ length: 1000 }, (_, i) => ({ id: i, value: Math.random() }));\n    const filtered = data.filter(item => item.value > 0.5);\n    const mapped = filtered.map(item => ({ ...item, doubled: item.value * 2 }));\n    \n    const elapsed = Date.now() - start;\n    \n    expect(elapsed).toBeLessThan(100); // Should be very fast\n    expect(mapped.length).toBeGreaterThan(0);\n    expect(mapped.length).toBeLessThanOrEqual(1000);\n  });\n\n  test('should handle concurrent operations', async () => {\n    const concurrentTasks = Array.from({ length: 10 }, async (_, i) => {\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 10));\n      return `task-${i}`;\n    });\n\n    const start = Date.now();\n    const results = await Promise.all(concurrentTasks);\n    const elapsed = Date.now() - start;\n\n    expect(results).toHaveLength(10);\n    expect(elapsed).toBeLessThan(100); // Should complete quickly\n    expect(results).toEqual(expect.arrayContaining([\n      expect.stringMatching(/^task-\\d+$/)\n    ]));\n  });\n});\n\n// =============================================================================\n// Integration Readiness Tests\n// =============================================================================\n\ndescribe('Integration Readiness', () => {\n  test('should have required Node.js version', () => {\n    const nodeVersion = process.version;\n    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);\n    \n    expect(majorVersion).toBeGreaterThanOrEqual(18);\n  });\n\n  test('should support modern JavaScript features', () => {\n    // Test optional chaining\n    const obj = { a: { b: { c: 'value' } } };\n    expect(obj.a?.b?.c).toBe('value');\n    expect(obj.a?.b?.d).toBeUndefined();\n\n    // Test nullish coalescing\n    const nullValue = null;\n    const undefinedValue = undefined;\n    const zeroValue = 0;\n    const emptyString = '';\n\n    expect(nullValue ?? 'default').toBe('default');\n    expect(undefinedValue ?? 'default').toBe('default');\n    expect(zeroValue ?? 'default').toBe(0);\n    expect(emptyString ?? 'default').toBe('');\n  });\n\n  test('should support destructuring and spread', () => {\n    const source = { a: 1, b: 2, c: 3 };\n    const { a, ...rest } = source;\n\n    expect(a).toBe(1);\n    expect(rest).toEqual({ b: 2, c: 3 });\n\n    const extended = { ...source, d: 4 };\n    expect(extended).toEqual({ a: 1, b: 2, c: 3, d: 4 });\n  });\n});\n\n// =============================================================================\n// Mock Server Response Tests\n// =============================================================================\n\ndescribe('Mock Server Responses', () => {\n  test('should format MCP responses correctly', () => {\n    const mockResponse = {\n      content: [\n        {\n          type: 'text',\n          text: 'Hello from MCP server',\n        },\n      ],\n    };\n\n    expect(mockResponse.content).toHaveLength(1);\n    expect(mockResponse.content[0].type).toBe('text');\n    expect(mockResponse.content[0].text).toBe('Hello from MCP server');\n  });\n\n  test('should handle error responses', () => {\n    const mockErrorResponse = {\n      content: [\n        {\n          type: 'text',\n          text: 'An error occurred',\n        },\n      ],\n      isError: true,\n    };\n\n    expect(mockErrorResponse.isError).toBe(true);\n    expect(mockErrorResponse.content[0].text).toBe('An error occurred');\n  });\n\n  test('should handle complex data responses', () => {\n    const complexData = {\n      users: [\n        { id: 1, name: 'Alice', roles: ['admin'] },\n        { id: 2, name: 'Bob', roles: ['user'] },\n      ],\n      pagination: {\n        page: 1,\n        total: 2,\n        hasMore: false,\n      },\n    };\n\n    const mockResponse = {\n      content: [\n        {\n          type: 'text',\n          text: JSON.stringify(complexData, null, 2),\n        },\n      ],\n    };\n\n    const parsedContent = JSON.parse(mockResponse.content[0].text);\n    \n    expect(parsedContent.users).toHaveLength(2);\n    expect(parsedContent.users[0].name).toBe('Alice');\n    expect(parsedContent.pagination.total).toBe(2);\n  });\n});\n\n// =============================================================================\n// Environment and Configuration Tests\n// =============================================================================\n\ndescribe('Environment Configuration', () => {\n  const originalEnv = process.env;\n\n  afterAll(() => {\n    process.env = originalEnv;\n  });\n\n  test('should handle environment variables', () => {\n    process.env.TEST_VAR = 'test_value';\n    \n    expect(process.env.TEST_VAR).toBe('test_value');\n    expect(process.env.NONEXISTENT_VAR).toBeUndefined();\n  });\n\n  test('should detect environment type', () => {\n    // Test NODE_ENV detection\n    process.env.NODE_ENV = 'test';\n    expect(process.env.NODE_ENV).toBe('test');\n    \n    const isDevelopment = process.env.NODE_ENV === 'development';\n    const isProduction = process.env.NODE_ENV === 'production';\n    const isTest = process.env.NODE_ENV === 'test';\n    \n    expect(isDevelopment).toBe(false);\n    expect(isProduction).toBe(false);\n    expect(isTest).toBe(true);\n  });\n});\n\n// =============================================================================\n// Resource Management Tests\n// =============================================================================\n\ndescribe('Resource Management', () => {\n  test('should manage memory efficiently', () => {\n    const initialMemory = process.memoryUsage();\n    \n    // Create some data\n    const largeArray = Array.from({ length: 10000 }, (_, i) => ({\n      id: i,\n      data: `item-${i}`,\n      timestamp: new Date().toISOString(),\n    }));\n\n    expect(largeArray).toHaveLength(10000);\n    \n    // Memory should not be excessive\n    const currentMemory = process.memoryUsage();\n    const heapDiff = currentMemory.heapUsed - initialMemory.heapUsed;\n    \n    // Should use less than 50MB for this test data\n    expect(heapDiff).toBeLessThan(50 * 1024 * 1024);\n  });\n\n  test('should handle cleanup properly', () => {\n    let cleanupCalled = false;\n    \n    const mockCleanup = () => {\n      cleanupCalled = true;\n    };\n\n    // Simulate resource allocation and cleanup\n    const resource = { cleanup: mockCleanup };\n    resource.cleanup();\n    \n    expect(cleanupCalled).toBe(true);\n  });\n});\n\n// =============================================================================\n// System Information Tests\n// =============================================================================\n\ndescribe('System Information', () => {\n  test('should provide system details', () => {\n    expect(process.platform).toBeDefined();\n    expect(process.arch).toBeDefined();\n    expect(process.version).toMatch(/^v\\d+\\.\\d+\\.\\d+/);\n    expect(process.uptime()).toBeGreaterThan(0);\n  });\n\n  test('should track timing accurately', () => {\n    const start = process.hrtime.bigint();\n    \n    // Small delay to ensure measurable time difference\n    for (let i = 0; i < 1000; i++) {\n      Math.random();\n    }\n    \n    const end = process.hrtime.bigint();\n    const duration = Number(end - start) / 1000000; // Convert to milliseconds\n    \n    expect(duration).toBeGreaterThan(0);\n    expect(duration).toBeLessThan(100); // Should be very fast\n  });\n});"],"version":3}