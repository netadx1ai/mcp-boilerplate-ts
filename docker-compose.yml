# =============================================================================
# MCP TypeScript Boilerplate - Docker Compose Configuration
# =============================================================================
#
# Comprehensive Docker Compose setup for development and production deployment
# of the MCP TypeScript server ecosystem.
#
# Usage:
#   docker-compose up                    # Start all services
#   docker-compose up news-data template # Start specific servers
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up # Production
#
# @author MCP Boilerplate Team
# @version 1.0.0
# =============================================================================

version: '3.8'

# =============================================================================
# Shared Configuration
# =============================================================================

x-common-variables: &common-variables
  NODE_ENV: ${NODE_ENV:-development}
  LOG_LEVEL: ${LOG_LEVEL:-info}
  DEBUG: ${DEBUG:-}

x-common-config: &common-config
  build:
    context: .
    dockerfile: Dockerfile
    target: development
  environment:
    <<: *common-variables
  volumes:
    - ./src:/app/src:ro
    - ./servers:/app/servers:ro
    - ./templates:/app/templates:ro
    - mcp-logs:/app/logs
    - mcp-data:/app/data
  networks:
    - mcp-network
  restart: unless-stopped
  healthcheck:
    test: ["/usr/local/bin/healthcheck.sh", "--quick"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 10s

# =============================================================================
# Production Servers
# =============================================================================

services:
  # News Data Server - Port 8000
  news-data:
    <<: *common-config
    container_name: mcp-news-data
    environment:
      <<: *common-variables
      SERVER_NAME: news-data-server
      PORT: 8000
      MCP_SERVERS: news-data
    ports:
      - "${NEWS_DATA_PORT:-8000}:8000"
    command: ["/usr/local/bin/entrypoint.sh", "news-data"]
    labels:
      - "mcp.service=news-data"
      - "mcp.type=production"
      - "mcp.tools=5"

  # Template Server - Port 8001  
  template:
    <<: *common-config
    container_name: mcp-template
    environment:
      <<: *common-variables
      SERVER_NAME: template-server
      PORT: 8001
      MCP_SERVERS: template
    ports:
      - "${TEMPLATE_PORT:-8001}:8001"
    command: ["/usr/local/bin/entrypoint.sh", "template"]
    labels:
      - "mcp.service=template"
      - "mcp.type=production"
      - "mcp.tools=8"

  # Analytics Server - Port 8002
  analytics:
    <<: *common-config
    container_name: mcp-analytics
    environment:
      <<: *common-variables
      SERVER_NAME: analytics-server
      PORT: 8002
      MCP_SERVERS: analytics
    ports:
      - "${ANALYTICS_PORT:-8002}:8002"
    command: ["/usr/local/bin/entrypoint.sh", "analytics"]
    labels:
      - "mcp.service=analytics"
      - "mcp.type=production" 
      - "mcp.tools=8"

  # Database Server - Port 8003
  database:
    <<: *common-config
    container_name: mcp-database
    environment:
      <<: *common-variables
      SERVER_NAME: database-server
      PORT: 8003
      MCP_SERVERS: database
      # Database connection examples
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-mcp_db}
      DB_USER: ${DB_USER:-mcp_user}
      DB_PASSWORD: ${DB_PASSWORD:-mcp_password}
    ports:
      - "${DATABASE_PORT:-8003}:8003"
    command: ["/usr/local/bin/entrypoint.sh", "database"]
    depends_on:
      - postgres
      - redis
    labels:
      - "mcp.service=database"
      - "mcp.type=production"
      - "mcp.tools=7"

  # API Gateway Server - Port 8004
  api-gateway:
    <<: *common-config
    container_name: mcp-api-gateway
    environment:
      <<: *common-variables
      SERVER_NAME: api-gateway-server
      PORT: 8004
      MCP_SERVERS: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8004}:8004"
    command: ["/usr/local/bin/entrypoint.sh", "api-gateway"]
    labels:
      - "mcp.service=api-gateway"
      - "mcp.type=production"
      - "mcp.tools=5"

  # Workflow Server - Port 8005
  workflow:
    <<: *common-config
    container_name: mcp-workflow
    environment:
      <<: *common-variables
      SERVER_NAME: workflow-server
      PORT: 8005
      MCP_SERVERS: workflow
    ports:
      - "${WORKFLOW_PORT:-8005}:8005"
    command: ["/usr/local/bin/entrypoint.sh", "workflow"]
    depends_on:
      - redis
    labels:
      - "mcp.service=workflow"
      - "mcp.type=production"
      - "mcp.tools=8"

# =============================================================================
# Template Servers (Development)
# =============================================================================

  # Basic Server Template - Port 8010
  basic-template:
    <<: *common-config
    container_name: mcp-basic-template
    environment:
      <<: *common-variables
      SERVER_NAME: basic-server-template
      PORT: 8010
      MCP_SERVERS: basic-server
    ports:
      - "${BASIC_TEMPLATE_PORT:-8010}:8010"
    command: ["/usr/local/bin/entrypoint.sh", "basic-server"]
    profiles:
      - templates
    labels:
      - "mcp.service=basic-template"
      - "mcp.type=template"
      - "mcp.tools=4"

  # API Wrapper Template - Port 8011
  api-wrapper-template:
    <<: *common-config
    container_name: mcp-api-wrapper-template
    environment:
      <<: *common-variables
      SERVER_NAME: api-wrapper-template
      PORT: 8011
      MCP_SERVERS: api-wrapper
    ports:
      - "${API_WRAPPER_TEMPLATE_PORT:-8011}:8011"
    command: ["/usr/local/bin/entrypoint.sh", "api-wrapper"]
    profiles:
      - templates
    labels:
      - "mcp.service=api-wrapper-template"
      - "mcp.type=template"
      - "mcp.tools=8"

  # Database Integration Template - Port 8012
  database-integration-template:
    <<: *common-config
    container_name: mcp-database-integration-template
    environment:
      <<: *common-variables
      SERVER_NAME: database-integration-template
      PORT: 8012
      MCP_SERVERS: database-integration
      # Database connections for template
      DB_HOST: postgres
      DB_PORT: 5432
    ports:
      - "${DB_INTEGRATION_TEMPLATE_PORT:-8012}:8012"
    command: ["/usr/local/bin/entrypoint.sh", "database-integration"]
    depends_on:
      - postgres
    profiles:
      - templates
    labels:
      - "mcp.service=database-integration-template"
      - "mcp.type=template"
      - "mcp.tools=10"

  # Authenticated Server Template - Port 8013
  authenticated-server-template:
    <<: *common-config
    container_name: mcp-authenticated-server-template
    environment:
      <<: *common-variables
      SERVER_NAME: authenticated-server-template
      PORT: 8013
      MCP_SERVERS: authenticated-server
      # Authentication configuration
      JWT_SECRET: ${JWT_SECRET:-development-secret-key}
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID:-}
      OAUTH_GOOGLE_CLIENT_SECRET: ${OAUTH_GOOGLE_CLIENT_SECRET:-}
      OAUTH_GITHUB_CLIENT_ID: ${OAUTH_GITHUB_CLIENT_ID:-}
      OAUTH_GITHUB_CLIENT_SECRET: ${OAUTH_GITHUB_CLIENT_SECRET:-}
    ports:
      - "${AUTH_TEMPLATE_PORT:-8013}:8013"
    command: ["/usr/local/bin/entrypoint.sh", "authenticated-server"]
    depends_on:
      - redis
    profiles:
      - templates
    labels:
      - "mcp.service=authenticated-server-template"
      - "mcp.type=template"
      - "mcp.tools=8"

# =============================================================================
# Supporting Services
# =============================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-mcp_db}
      POSTGRES_USER: ${DB_USER:-mcp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mcp_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/docker/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mcp_user} -d ${DB_NAME:-mcp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "mcp.service=postgres"
      - "mcp.type=database"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./deployment/docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf
    labels:
      - "mcp.service=redis"
      - "mcp.type=cache"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./deployment/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/docker/ssl:/etc/nginx/ssl:ro
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - news-data
      - template
      - analytics
      - database
      - api-gateway
      - workflow
    profiles:
      - proxy
    labels:
      - "mcp.service=nginx"
      - "mcp.type=proxy"

# =============================================================================
# Development Services
# =============================================================================

  # Development All-in-One
  dev-all:
    <<: *common-config
    container_name: mcp-dev-all
    environment:
      <<: *common-variables
      MCP_SERVERS: news-data,template,analytics,database,api-gateway,workflow
    ports:
      - "8000-8005:8000-8005"
    command: ["/usr/local/bin/entrypoint.sh"]
    depends_on:
      - postgres
      - redis
    profiles:
      - dev-all
    labels:
      - "mcp.service=dev-all"
      - "mcp.type=development"

  # MCP Client Example
  mcp-client:
    <<: *common-config
    container_name: mcp-client-example
    environment:
      <<: *common-variables
    command: ["npm", "run", "client", "-w", "examples/client-integration"]
    depends_on:
      - news-data
      - template
      - analytics
    profiles:
      - client-example
    labels:
      - "mcp.service=client-example"
      - "mcp.type=example"

# =============================================================================
# Monitoring Services (Optional)
# =============================================================================

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - mcp-network
    restart: unless-stopped
    profiles:
      - monitoring
    labels:
      - "mcp.service=prometheus"
      - "mcp.type=monitoring"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring
    labels:
      - "mcp.service=grafana"
      - "mcp.type=monitoring"

# =============================================================================
# Networks
# =============================================================================

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================

volumes:
  # Application data
  mcp-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs

  mcp-data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ./data/app

  # Database data
  postgres-data:
    driver: local

  redis-data:
    driver: local

  # Monitoring data
  prometheus-data:
    driver: local

  grafana-data:
    driver: local